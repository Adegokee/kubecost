apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kubecost-helm-direct
  namespace: argocd
  labels:
    app.kubernetes.io/name: kubecost
    app.kubernetes.io/part-of: platform-tools
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: platform-tools
  
  # Direct Helm chart approach (this should work immediately)
  source:
    repoURL: https://kubecost.github.io/cost-analyzer/
    chart: cost-analyzer
    targetRevision: "2.1.0"
    helm:
      releaseName: kubecost
      values: |
        # Kubecost configuration
        kubecostToken: ""  # Add your token here for enterprise features
        
        # Global settings
        global:
          grafana:
            enabled: false
          prometheus:
            enabled: true
            fqdn: "http://prometheus-server.monitoring.svc.cluster.local"
        
        # Cost analyzer settings
        costAnalyzer:
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
        
        # Persistent volume
        persistentVolume:
          enabled: true
          size: 10Gi
          storageClass: ""
        
        # Service configuration
        service:
          type: ClusterIP
          port: 9090
        
        # Ingress configuration
        ingress:
          enabled: true
          className: "nginx"
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
          hosts:
            - host: kubecost.your-domain.com
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: kubecost-tls
              hosts:
                - kubecost.your-domain.com
        
        # Service account
        serviceAccount:
          create: true
          name: kubecost-cost-analyzer
        
        # Pod annotations for monitoring
        podAnnotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9003"
          prometheus.io/path: "/metrics"
        
        # Network policy
        networkPolicy:
          enabled: false

  destination:
    server: https://kubernetes.default.svc
    namespace: kubecost

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m

  revisionHistoryLimit: 10

  ignoreDifferences:
    - group: apps
      kind: Deployment
      jsonPointers:
        - /spec/replicas