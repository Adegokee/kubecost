# Kubecost Helm Chart Values Configuration
# Repository: https://github.com/kubecost/cost-analyzer-helm-chart
# Chart Version: 2.0.4

# Global configuration
global:
  # Grafana configuration
  grafana:
    enabled: true
    domainName: kubecost-grafana
    scheme: "http"
    proxy: true
  
  # Prometheus configuration
  prometheus:
    enabled: true
    fqdn: http://prometheus-server.monitoring.svc.cluster.local:80
    queryServiceBasePath: ""
    
  # Thanos configuration (for long-term storage)
  thanos:
    enabled: false

# Kubecost frontend configuration
kubecostFrontend:
  image:
    repository: gcr.io/kubecost1/frontend
    tag: prod-1.106.0
    pullPolicy: Always
  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"

# Cost model configuration
kubecostModel:
  image:
    repository: gcr.io/kubecost1/cost-model
    tag: prod-1.106.0
    pullPolicy: Always
  
  # Resource allocation
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"
  
  # Performance settings
  warmCache: true
  warmSavingsCache: true
  etl: true
  etlBucketConfigSecret: ""
  
  # Log configuration
  logLevel: info
  logFormat: JSON

# Service configuration
service:
  type: ClusterIP
  port: 9090
  targetPort: 9090
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9003"
    prometheus.io/path: "/metrics"

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    
    # Authentication (configure based on your auth system)
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2-proxy.auth.svc.cluster.local/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2-proxy.auth.svc.cluster.local/oauth2/start?rd=$escaped_request_uri"
    nginx.ingress.kubernetes.io/auth-response-headers: "x-auth-request-user,x-auth-request-email,x-auth-request-preferred-username"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    nginx.ingress.kubernetes.io/rate-limit-rps: "5"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    
    # TLS certificate
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
  hosts:
    - host: kubecost.yourdomain.com  # CHANGE THIS TO YOUR DOMAIN
      paths:
        - path: /
          pathType: Prefix
  
  tls:
    - secretName: kubecost-tls-secret
      hosts:
        - kubecost.yourdomain.com  # CHANGE THIS TO YOUR DOMAIN

# Persistent Volume configuration
persistentVolume:
  enabled: true
  size: "20Gi"
  storageClass: ""  # Use default storage class
  accessModes:
    - ReadWriteOnce
  
# PostgreSQL configuration (for ETL data)
postgresql:
  enabled: true
  auth:
    postgresPassword: "kubecost-postgres-password"  # CHANGE IN PRODUCTION
    database: "kubecost"
    username: "postgres"
  primary:
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    persistence:
      enabled: true
      size: "10Gi"
      storageClass: ""

# Grafana configuration
grafana:
  enabled: true
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
    datasources:
      enabled: true
      defaultDatasourceEnabled: true
  
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
  
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"
  
  adminPassword: "kubecost-grafana-admin"  # CHANGE IN PRODUCTION

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  additionalLabels:
    prometheus: kube-prometheus
    release: prometheus-operator

# Network costs configuration
networkCosts:
  enabled: false  # Enable if you have network cost data
  config:
    services:
      - service: "amazon-web-services"
        enabled: false
      - service: "azure"
        enabled: false
      - service: "google-cloud-platform"
        enabled: false

# Cost allocation settings
costAnalyzerConfig:
  # Currency configuration
  currencyCode: "USD"
  
  # Cloud provider configurations (configure as needed)
  customPricing:
    enabled: false
  
  # AWS configuration
  awsServiceKeyName: ""
  awsServiceKeySecret: ""
  
  # Azure configuration
  azureSubscriptionID: ""
  azureServiceKeyName: ""
  azureServiceKeySecret: ""
  
  # GCP configuration
  gcpServiceKeyName: ""
  gcpServiceKeySecret: ""
  
  # Discount configuration
  discount: 0.0
  negotiatedDiscount: 0.0

# Cluster controller (for multi-cluster setups)
clusterController:
  enabled: false

# Reporting configuration
reporting:
  productAnalytics: false

# Budget alerts
budgetAlertsEnabled: true

# Kubecost aggregator
kubecostAggregator:
  enabled: true
  aggregatorDbStorage: 10Gi

# Priority class
priorityClassName: ""

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9003"

# Pod labels
podLabels: {}

# Security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false  # Kubecost needs write access for some operations
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE

# Liveness and readiness probes
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Image pull secrets
imagePullSecrets: []

# Recommendation engine
recommendationEngine:
  enabled: true

# Upgrade job
upgradeJob:
  enabled: true